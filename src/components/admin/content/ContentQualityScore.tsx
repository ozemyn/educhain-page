'use client';

import React, { useState, useEffect } from 'react';
import { GlassCard } from '../../ui/GlassCard';
import { LoadingSpinner } from '../../ui/LoadingSpinner';
import { Content } from '../../../types/content';

interface QualityScore {
  overall: number;
  criteria: {
    contentLength: number;
    readability: number;
    originality: number;
    relevance: number;
    engagement: number;
  };
  suggestions: string[];
  autoGenerated: boolean;
}

interface ContentQualityScoreProps {
  content: Content | null;
  onScoreUpdate?: (score: QualityScore) => void;
}

export const ContentQualityScore: React.FC<ContentQualityScoreProps> = ({
  content,
  onScoreUpdate
}) => {
  const [score, setScore] = useState<QualityScore | null>(null);
  const [loading, setLoading] = useState(false);
  const [manualScore, setManualScore] = useState<Partial<QualityScore['criteria']>>({});

  useEffect(() => {
    if (content) {
      fetchQualityScore();
    }
  }, [content]);

  const fetchQualityScore = async () => {
    if (!content) return;
    
    setLoading(true);
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/content/${content.id}/quality-score`);
      const data = await response.json();
      
      if (data.success) {
        setScore(data.data);
        setManualScore(data.data.criteria);
      }
    } catch (error) {
      console.error('获取质量评分失败:', error);
    } finally {
      setLoading(false);
    }
  };

  const updateManualScore = async () => {
    if (!content || !score) return;
    
    setLoading(true);
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/content/${content.id}/quality-score`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          criteria: manualScore
        })
      });

      const data = await response.json();
      
      if (data.success) {
        setScore(data.data);
        onScoreUpdate?.(data.data);
      }
    } catch (error) {
      console.error('更新质量评分失败:', error);
    } finally {
      setLoading(false);
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-400';
    if (score >= 60) return 'text-yellow-400';
    if (score >= 40) return 'text-orange-400';
    return 'text-red-400';
  };

  const getScoreGrade = (score: number) => {
    if (score >= 90) return 'A+';
    if (score >= 80) return 'A';
    if (score >= 70) return 'B+';
    if (score >= 60) return 'B';
    if (score >= 50) return 'C+';
    if (score >= 40) return 'C';
    return 'D';
  };

  if (!content) {
    return (
      <GlassCard className="p-6">
        <div className="text-center text-gray-400 py-8">
          请选择内容以查看质量评分
        </div>
      </GlassCard>
    );
  }

  if (loading && !score) {
    return (
      <GlassCard className="p-6">
        <div className="flex justify-center py-8">
          <LoadingSpinner />
        </div>
      </GlassCard>
    );
  }

  return (
    <GlassCard className="p-6">
      <div className="mb-6">
        <h3 className="text-lg font-medium text-white mb-2">内容质量评分</h3>
        <p className="text-gray-400 text-sm">基于多维度算法自动评估内容质量</p>
      </div>

      {score ? (
        <>
          {/* 总体评分 */}
          <div className="text-center mb-6 p-6 bg-white/5 rounded-lg">
            <div className={`text-4xl font-bold mb-2 ${getScoreColor(score.overall)}`}>
              {score.overall}
            </div>
            <div className={`text-xl font-medium mb-1 ${getScoreColor(score.overall)}`}>
              {getScoreGrade(score.overall)} 级
            </div>
            <div className="text-gray-400 text-sm">
              {score.autoGenerated ? '系统自动评分' : '人工调整评分'}
            </div>
          </div>

          {/* 详细评分标准 */}
          <div className="space-y-4 mb-6">
            <h4 className="text-md font-medium text-white">评分详情</h4>
            
            {Object.entries({
              contentLength: '内容长度',
              readability: '可读性',
              originality: '原创性',
              relevance: '相关性',
              engagement: '互动性'
            }).map(([key, label]) => {
              const criteriaKey = key as keyof QualityScore['criteria'];
              const currentScore = score.criteria[criteriaKey];
              
              return (
                <div key={key} className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-300">{label}</span>
                    <span className={`font-medium ${getScoreColor(currentScore)}`}>
                      {currentScore}
                    </span>
                  </div>
                  
                  {/* 进度条 */}
                  <div className="bg-black/20 rounded-full h-2 overflow-hidden">
                    <div 
                      className={`h-full transition-all ${
                        currentScore >= 80 ? 'bg-green-400/60' :
                        currentScore >= 60 ? 'bg-yellow-400/60' :
                        currentScore >= 40 ? 'bg-orange-400/60' :
                        'bg-red-400/60'
                      }`}
                      style={{ width: `${currentScore}%` }}
                    />
                  </div>
                  
                  {/* 手动调整 */}
                  <div className="flex items-center space-x-2">
                    <input
                      type="range"
                      min="0"
                      max="100"
                      value={manualScore[criteriaKey] || currentScore}
                      onChange={(e) => setManualScore(prev => ({
                        ...prev,
                        [criteriaKey]: parseInt(e.target.value)
                      }))}
                      className="flex-1 h-1 bg-white/10 rounded-lg appearance-none cursor-pointer"
                    />
                    <input
                      type="number"
                      min="0"
                      max="100"
                      value={manualScore[criteriaKey] || currentScore}
                      onChange={(e) => setManualScore(prev => ({
                        ...prev,
                        [criteriaKey]: parseInt(e.target.value) || 0
                      }))}
                      className="w-16 px-2 py-1 bg-white/5 border border-white/10 rounded text-white text-sm text-center"
                    />
                  </div>
                </div>
              );
            })}
          </div>

          {/* 改进建议 */}
          {score.suggestions && score.suggestions.length > 0 && (
            <div className="mb-6">
              <h4 className="text-md font-medium text-white mb-3">改进建议</h4>
              <div className="space-y-2">
                {score.suggestions.map((suggestion, index) => (
                  <div
                    key={index}
                    className="flex items-start space-x-2 p-3 bg-blue-500/10 border border-blue-400/20 rounded-lg"
                  >
                    <div className="w-5 h-5 bg-blue-400/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                      <span className="text-blue-400 text-xs font-bold">{index + 1}</span>
                    </div>
                    <span className="text-blue-300 text-sm">{suggestion}</span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* 更新按钮 */}
          <div className="flex justify-end">
            <button
              onClick={updateManualScore}
              disabled={loading}
              className="px-6 py-2 bg-blue-500/20 text-blue-300 border border-blue-400/50 rounded-lg hover:bg-blue-500/30 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? <LoadingSpinner size="sm" /> : '更新评分'}
            </button>
          </div>
        </>
      ) : (
        <div className="text-center text-gray-400 py-8">
          暂无质量评分数据
        </div>
      )}
    </GlassCard>
  );
};